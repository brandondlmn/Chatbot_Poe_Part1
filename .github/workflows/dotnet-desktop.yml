# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#
# To configure this workflow:
#
# 1. Configure environment variables
# GitHub sets default environment variables for every workflow run.
# Replace the variables relative to your project in the "env" section below.
#
# 2. Signing
# Generate a signing certificate in the Windows Application
# Packaging Project or add an existing signing certificate to the project.
# Next, use PowerShell to encode the .pfx file using Base64 encoding
# by running the following Powershell script to generate the output string:
#
# $pfx_cert = Get-Content '.\SigningCertificate.pfx' -Encoding Byte
# [System.Convert]::ToBase64String($pfx_cert) | Out-File 'SigningCertificate_Encoded.txt'
#
# Open the output file, SigningCertificate_Encoded.txt, and copy the
# string inside. Then, add the string to the repo as a GitHub secret
# and name it "Base64_Encoded_Pfx."
# For more information on how to configure your signing certificate for
# this workflow, refer to https://github.com/microsoft/github-actions-for-desktop-apps#signing
#
# Finally, add the signing certificate password to the repo as a secret and name it "Pfx_Key".
# See "Build the Windows Application Packaging project" below to see how the secret is used.
#
# For more information on GitHub Actions, refer to https://github.com/features/actions
# For a complete CI/CD sample to get started with GitHub Action workflows for Desktop Applications,
# refer to https://github.com/microsoft/github-actions-for-desktop-apps

name: .NET Core Desktop

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    strategy:
      matrix:
        configuration: [Debug, Release]  # Build both configurations
        dotnet-version: [ '6.0.x', '7.0.x' ]  # Test against multiple .NET versions

    runs-on: windows-latest  # Required for desktop apps (SoundPlayer, etc.)

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Required for full Git history (if needed)

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --configuration ${{ matrix.configuration }} --no-restore

    - name: Test (if tests exist)
      run: dotnet test --no-build --verbosity normal

    # Optional: Validate required files (greeting.wav, chat.jpeg)
    - name: Check for required files
      run: |
        if (-not (Test-Path -Path "greeting.wav")) { 
          Write-Error "greeting.wav not found in root directory!" 
          exit 1 
        }
        if (-not (Test-Path -Path "chat.jpeg")) { 
          Write-Error "chat.jpeg not found in root directory!" 
          exit 1 
        }

    # Upload build artifacts (optional)
    - name: Upload artifacts
      if: matrix.configuration == 'Release'  # Only upload Release builds
      uses: actions/upload-artifact@v4
      with:
        name: ChatBot-Binaries-${{ matrix.dotnet-version }}
        path: |
          bin/Release/net${{ matrix.dotnet-version }}/**/*
          greeting.wav
          chat.jpeg
